#!/usr/bin/env python3
 
from dataclasses import dataclass
import glob, re
 
invalid_rx = re.compile(r'''
    \.
    | ^[vwsh]  # RAM
    | ^Tileset.+(?:GFX|Meta|Coll|Attr|Anim)$  # must exist for every tileset
    | _Map(?:Attributes|Scripts|Events)$      # must exist for every map
    | _Blocks$                                # must exist for every map
    | _MapSetupCmd$               # generated by `add_mapsetup`
    | StdScript$                  # generated by `add_stdscript`
    | Predef$                     # generated by `add_predef`
    | Special$                    # generated by `add_special`
    | _TradeCmd$                  # generated by `add_tradeanim`
    | ^PokeAnim_.+_SetupCommand$  # generated by `add_setup_command`
''', re.X)
 
@dataclass
class Label:
    label: str
    address: str
    references: int = 0
 
labels = {}
with open('pokecrystal.sym', 'r', encoding='utf8') as sym_file:
    for line in sym_file:
        address, label = line.rstrip().split(maxsplit=1)
        labels[label] = Label(label, address)
 
label_rx = re.compile(r'^\s*([a-z_][a-z0-9_#@]*):{1,2}(.*)', re.I)
reference_rx = re.compile(r'\b([a-z_][a-z0-9_#@]*)\b', re.I)
 
for filename in glob.glob('**/*.asm', recursive=True):
    with open(filename, 'r', encoding='utf8') as asm_file:
        scope = None
        for line in asm_file:
            if (m := label_rx.match(line)):
                scope, line = m.groups()
            for label in re.findall(reference_rx, line):
                if label in labels and label != scope:
                    labels[label].references += 1
 
for label in labels.values():
    if not label.references and not re.search(invalid_rx, label.label):
        print(label.address, label.label)
